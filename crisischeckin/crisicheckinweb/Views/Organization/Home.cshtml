@model crisicheckinweb.ViewModels.OrganizationHomeViewModel
@using Models
@{
    ViewBag.Title = "Organization Home";
}


<h2>@Model.Organization.OrganizationName - Home</h2>


<h3>Active Disasters</h3>
<table class="table table-striped table-bordered">
    <tr class="ht-header">
        <th>Name</th>
        <th>Volunteer Checkins</th>
        <th>Resource Checkins</th>
    </tr>
    @foreach (var disaster in Model.Disasters)
    {
        <tr>
            <td>@disaster.Disaster.Name</td>
            <td>
                @if (disaster.Commitments.Count() > 0)
                {
                    foreach (var clusterGroup in disaster.Commitments.GroupBy(commitment => commitment.ClusterId))
                    {
                        if (!clusterGroup.Key.HasValue)
                        {
                            <text>No cluster</text>
                        }
                        else
                        {
                            <text>@clusterGroup.First().Cluster.Name</text>
                        }
                        <text>: @clusterGroup.Count()</text>
                        <br />
                    }
                }
                else
                {
                    <text>None</text>
                }
            </td>
            <td>
                @if (disaster.Resources.Count() > 0)
                {
                    foreach (var typeGroup in disaster.Resources.GroupBy(resource => resource.ResourceType))
                    {
                        <text>@typeGroup.First().ResourceType.TypeName: @typeGroup.Count()</text>
                        <br />
                    }
                }
                else
                {
                    <text>None</text>
                }
            </td>
        </tr>
    }
</table>


<h3>Contacts</h3>
<table class="table table-striped table-bordered">
    <tr class="ht-header">
        <th>Name</th>
        <th>Email</th>
        <th>Phone</th>
    </tr>
    @foreach (var contact in Model.Organization.Contacts)
    {
        <tr>
            <td>@contact.Person.FullName</td>
            <td>@contact.Person.Email</td>
            <td>@contact.Person.PhoneNumber</td>
        </tr>
    }
</table>


<h3>Resources</h3>
<table class="table table-striped table-bordered">
    <tr class="ht-header">
        <th>Disaster Name</th>
        <th>Description</th>
        <th>Quantity</th>
        <th>Type</th>
        <th>Start Date</th>
        <th>End Date</th>
        <th>Location</th>
        <th>&nbsp;</th>
    </tr>
    @foreach (var r in Model.OrganizationResources)
    {
        <tr>
            <td>@r.Disaster.Name</td>
            <td>@r.Description</td>
            <td>@r.Qty</td>
            <td>@r.ResourceType.TypeName</td>
            <td>@r.StartOfAvailability.ToShortDateString()</td>
            <td>@r.EndOfAvailability.ToShortDateString()</td>
            <td>@r.Location.AddressLine1</td>
            <td>
                @using (Html.BeginForm("RemoveResource", "Organization", FormMethod.Post, new { @class = "navbar-form" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.OrganizationId, new { @Value = Model.OrganizationId })
                    @Html.HiddenFor(m => m.RemoveResourceId, new { @Value = r.ResourceId })
                    <button class="btn btn-danger btn-xs" type="submit"><i class="glyphicon glyphicon-remove"></i> Remove</button>
                }
            </td>
        </tr>
    }
</table>


<h4>Check in New Resource</h4>
@using (Html.BeginForm("CheckinResource", "Organization"))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary()

    @Html.HiddenFor(m => m.OrganizationId, new { @Value = Model.OrganizationId });


    <table class="table">
        <thead>
            <tr>
                <th>Disaster <span style="color:red;">*</span></th>
                <th>Description<span style="color:red;">*</span></th>
                <th>Quantity<span style="color:red;">*</span></th>
                <th>Type<span style="color:red;">*</span></th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Location</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@Html.DropDownListFor(m => m.ResourceDisasterId, new SelectList(Model.AllDisasters, "Id", "Name", Model.ResourceDisasterId), "-- Choose One --", new { @class = "form-control", @id = "disasterList" })</td>
                <td>@Html.TextBoxFor(m => m.ResourceDescription)</td>
                <td>@Html.TextBoxFor(m => m.ResourceQuantity)</td>
                <td>@Html.DropDownListFor(m => m.ResourceTypeId, new SelectList(Model.ResourceTypes, "ResourceTypeId", "TypeName", Model.ResourceTypeId), "-- Choose One --", new { @class = "form-control", @id = "resourcetypelist" })</td>
                <td>@Html.TextBoxFor(m => m.ResourceStartDate, new { id = "dp_resourceStartDate", @class = "form-control" })</td>
                <td>@Html.TextBoxFor(m => m.ResourceEndDate, new { id = "dp_resourceEndDate", @class = "form-control" })</td>
                <td>@Html.TextBoxFor(m => m.ResourceLocation, new { @class = "form-control" })</td>
                <td><input class="btn btn-black" id="GoButton" type="submit" value="Checkin" /></td>
            </tr>
        </tbody>
    </table>
}


<h3>Volunteers</h3>
@Html.ValidationSummary()
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Phone</th>
            <th>Admin</th>
            @if (Model.IsAdmin)
            {
                <th></th>
                <th></th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var volunteer in Model.Volunteers)
        {
            <tr>
                <td>@volunteer.FullName</td>
                <td>@volunteer.Email</td>
                <td>@volunteer.PhoneNumber</td>
                <td>@(volunteer.IsOrganizationAdmin ? "Yes" : "No")</td>
                @if (Model.IsAdmin)
                {
                    <td>
                        @using (Html.BeginForm("RemoveVolunteer", "Organization", FormMethod.Post, new { @class = "navbar-form" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(m => m.OrganizationId, new { @Value = Model.OrganizationId })
                            @Html.HiddenFor(m => m.RemoveVolunteerId, new { @Value = volunteer.Id })
                            <button class="btn btn-danger btn-xs" type="submit"><i class="glyphicon glyphicon-remove"></i> Remove</button>
                        }
                    </td>
                    <td>
                        @if (!volunteer.IsOrganizationAdmin)
                        {
                            using (Html.BeginForm("PromoteToAdmin", "Organization", FormMethod.Post, new { @class = "navbar-form" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.HiddenFor(m => m.OrganizationId, new { @Value = Model.OrganizationId })
                                @Html.HiddenFor(m => m.PromoteToAdminPersonId, new { @Value = volunteer.Id })
                                <button class="btn btn-danger btn-xs" type="submit"><i class="glyphicon glyphicon-remove"></i> Elevate admin</button>
                            }
                        }
                        else
                        {
                            using (Html.BeginForm("DemoteFromAdmin", "Organization", FormMethod.Post, new { @class = "navbar-form" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.HiddenFor(m => m.OrganizationId, new { @Value = Model.OrganizationId })
                                @Html.HiddenFor(m => m.DemoteFromAdminPersonId, new { @Value = volunteer.Id })
                                <button class="btn btn-danger btn-xs" type="submit"><i class="glyphicon glyphicon-remove"></i> Remove admin</button>
                            }
                        }
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@if (Model.IsAdmin)
{
    <h4>Add Volunteer to Organization</h4>
    using (Html.BeginForm("AddVolunteer", "Organization", FormMethod.Post, new { @class = "navbar-form" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary()
        @Html.HiddenFor(m => m.OrganizationId, new { @Value = Model.OrganizationId })
        @Html.DropDownListFor(m => m.AddVolunteerId, Model.VolunteersSelectList, "-- Select Volunteer --", new { @class = "form-control", @id = "addvolunteerlist" })
        <button class="btn btn-danger btn-xs" type="submit"><i class="glyphicon glyphicon-remove"></i> Add</button>
    }
}



@section scripts
{
    <script type="text/javascript" src="~/scripts/App/organizationHome.js">
    </script>
}
